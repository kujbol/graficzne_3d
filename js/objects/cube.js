// Generated by CoffeeScript 1.10.0
(function() {
  var object_count,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  object_count = 0;

  window.Cube = (function(superClass) {
    extend(Cube, superClass);

    function Cube(points) {
      if (points == null) {
        points = null;
      }
      Cube.__super__.constructor.call(this, "Cube_" + object_count);
      object_count++;
      if (points === null) {
        this.points = this.create_points();
      } else {
        this.points = points;
      }
      this.create_triangles();
    }

    Cube.prototype.create_triangles = function(new_points) {
      var p, p0, p1, p2, p3, p4, p5, p6, p7, p8, ref;
      if (new_points == null) {
        new_points = null;
      }
      if (new_points) {
        this.points = new_points;
      }
      p = this.points;
      ref = [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]], p0 = ref[0], p1 = ref[1], p2 = ref[2], p3 = ref[3], p4 = ref[4], p5 = ref[5], p6 = ref[6], p7 = ref[7], p8 = ref[8];
      return this.triangles = [new Triangle(p0, p1, p2), new Triangle(p3, p1, p2), new Triangle(p4, p6, p5), new Triangle(p7, p6, p5), new Triangle(p4, p0, p5), new Triangle(p1, p0, p5), new Triangle(p6, p2, p7), new Triangle(p3, p2, p7), new Triangle(p0, p4, p2), new Triangle(p6, p2, p4), new Triangle(p1, p5, p3), new Triangle(p7, p5, p3)];
    };

    Cube.prototype.create_points = function() {
      var i, it, j, k, l, len, len1, len2, m, n, points, ref, ref1, ref2;
      it = 0;
      points = [];
      ref = [1, -1];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        ref1 = [1, -1];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          j = ref1[m];
          ref2 = [1, -1];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            k = ref2[n];
            if (this.points.length > 0) {
              points.push(new Point(k, j, i, this.points[it].color));
              it += 1;
            } else {
              points.push(new Point(k, j, i));
            }
          }
        }
      }
      return points;
    };

    return Cube;

  })(BaseObject);

}).call(this);

//# sourceMappingURL=cube.js.map
