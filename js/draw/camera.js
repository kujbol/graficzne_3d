// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PerspectiveCamera = (function(superClass) {
    extend(PerspectiveCamera, superClass);

    function PerspectiveCamera() {
      var FOVx, FOVy, far, fx, fy, fz, near, tz;
      this.settings = new CameraSettings(this);
      this.settings.load_settings();
      far = 10;
      near = 1;
      FOVx = math.pi / 2;
      FOVy = math.pi / 2;
      fx = 1 / math.tan(FOVx / 2);
      fy = 1 / math.tan(FOVy / 2);
      fz = -(far + near) / (far - near);
      tz = -2 * (far * near) / (far - near);
      this.camera_matrix = math.matrix([[fx, 0, 0, 0], [0, fy, 0, 0], [0, 0, fz, tz], [0, 0, -1, 0]]);
      this.update_matrix();
    }

    PerspectiveCamera.prototype.update_matrix = function() {
      this.matrix = this.create_matrix();
      this.matrix = math.inv(this.matrix);
      return this.matrix = math.multiply(this.camera_matrix, this.matrix);
    };

    PerspectiveCamera.prototype.apply_settings = function() {
      "Overwrite method of applaing settings, to stick with camera\nidea";
      return this.update_matrix();
    };

    PerspectiveCamera.prototype.cast_triangle = function(triangle) {
      var color, p1, p2, p3;
      p1 = math.multiply(this.matrix, create_matrix_point(triangle.p1));
      color = triangle.p1.color;
      p1 = new Point(p1._data[0][0] / p1._data[3][0], p1._data[1][0] / p1._data[3][0], p1._data[2][0] / p1._data[3][0], color);
      p2 = math.multiply(this.matrix, create_matrix_point(triangle.p2));
      color = triangle.p2.color;
      p2 = new Point(p2._data[0][0] / p2._data[3][0], p2._data[1][0] / p2._data[3][0], p2._data[2][0] / p2._data[3][0], color);
      p3 = math.multiply(this.matrix, create_matrix_point(triangle.p3));
      color = triangle.p3.color;
      p3 = new Point(p3._data[0][0] / p3._data[3][0], p3._data[1][0] / p3._data[3][0], p3._data[2][0] / p3._data[3][0], color);
      return new Triangle(p1, p2, p3, color = triangle.color);
    };

    return PerspectiveCamera;

  })(BaseObject);

}).call(this);

//# sourceMappingURL=camera.js.map
